"Bazel helper rules"

load("@npm//@bazel/typescript:index.bzl", "ts_project")
load("@build_bazel_rules_nodejs//:index.bzl", "js_library")
load("@npm//jest:index.bzl", "jest", _jest_test = "jest_test")
load("@npm//prettier:index.bzl", _prettier = "prettier", _prettier_test = "prettier_test")
load("@io_bazel_rules_go//go:def.bzl", "go_binary")

def devserver(name, entry, index, srcs = []):
    go_binary(
        name = name,
        srcs = ["//tools:devserver.go"],
        deps = [
            "@com_github_evanw_esbuild//pkg/api:go_default_library",
        ],
        data = srcs + [index],
        args = [
            "--root ./%s" % native.package_name(),
            "--entry %s/%s" % (native.package_name(), entry),
        ],
        tags = ["ibazel_notify_changes"],
    )

def ts_compile(name, srcs, deps, package_name = None, package_json = None, **kwargs):
    """Compile TS with prefilled args.

    Args:
        name: target name
        srcs: src files
        deps: deps
        package_name: name from package.json
        package_json: If a package.json is here provide it
        esm: If an e
        **kwargs: Keyword arguments
    """
    deps = deps + ["@npm//tslib"]

    ts_project(
        name = "%s-base" % name,
        srcs = srcs,
        deps = deps,
        **kwargs
    )

    native.filegroup(
        name = "types",
        srcs = [":%s-base" % name],
        output_group = "types",
        visibility = ["//visibility:public"],
    )

    js_library(
        name = name,
        package_name = package_name,
        srcs = ["package.json"] if package_json else [],
        deps = [":%s-base" % name],
        visibility = ["//visibility:public"],
    )

def jest_test(
        name,
        srcs,
        deps = [],
        size = "medium",
        jest_config = "//:jest.config.js",
        snapshots = [],
        flaky = False,
        additional_args = [],
        **kwargs):
    """A macro around the autogenerated jest_test rule.

    Args:
        name: target name
        srcs: list of tests, srcs & snapshot files
        deps: npm deps
        size: test size
        snapshots: snapshot files
        jest_config: jest.config.js file, default to the root one
        flaky: Whether this test is flaky
        additional_args: Additional CLI arguments
        **kwargs: the rest
    """

    templated_args = [
        "--nobazel_patch_module_resolver",
        "--config",
        "$(rootpath %s)" % jest_config,
        "--no-cache",
        "--no-watchman",
        "--ci",
        "--runInBand",
        "--colors",
    ] + additional_args

    for src in srcs:
        templated_args.extend(["--runTestsByPath", "$(rootpath %s)" % src])

    data = [jest_config] + srcs + snapshots + deps + [
        "@npm//@types/node",
        "@npm//@types/jest",
        "@npm//tslib",
        "//tools:jest-reporter.js",
    ]

    _jest_test(
        name = name,
        data = data,
        templated_args = templated_args,
        size = size,
        flaky = flaky,
        **kwargs
    )

    jest(
        name = "%s.update" % name,
        data = data,
        templated_args = templated_args + ["-u"],
        **kwargs
    )

def prettier(name, srcs, config = "//:.prettierrc.js", **kwargs):
    native.filegroup(
        name = "%s_srcs" % name,
        srcs = srcs,
    )

    data = [
        "%s_srcs" % name,
        config,
        "//:.prettierignore",
    ]
    args = [
        "--config",
        "$(rootpath %s)" % config,
        "--loglevel",
        "warn",
    ]

    _prettier_test(
        name = "%s_test" % name,
        data = data,
        templated_args = args + [
            "--check",
            "$(rootpaths :%s_srcs)" % name,
        ],
        **kwargs
    )

    _prettier(
        name = name,
        data = data,
        templated_args = args + [
            "--write",
            "$(rootpaths :%s_srcs)" % name,
        ],
        visibility = [
            "//:__pkg__",
        ],
        **kwargs
    )
